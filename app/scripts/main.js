function fib(n) {  var seq = [];  var a = 0;  var b = 1;  var t;  while (n-- > 0) {    t = a;    a = b;    b += t;    seq.push(a);  }  //return a;  return seq;}function linear(n) {  var seq = [];  for (var i = 0; i < n; i++) {    seq.push(i);  }  return seq;}var centerX;var centerY;var radius = 3;var maxSeq = 0;function calcFibXY(i, fibNum) {  var angle = (Math.PI / 8) * i;  var normX = Math.cos(angle) * (fibNum / maxSeq) * centerX;  var normY = Math.sin(angle) * (fibNum / maxSeq) * centerY;  var x = centerX + normX;   var y = centerY + normY;   return {x: x, y: y};}//$(document).ready(function() {function draw() {  //var seq = fib(10);  var seq = linear(200);  var canvasEl = document.getElementById('fibonacci-canvas');  centerX = canvasEl.width / 2;  centerY = canvasEl.height / 2;  var context = canvasEl.getContext('2d');  context.fillStyle = 'red';  maxSeq = seq[seq.length - 1];  var points = [];  for (var i = 0; i < seq.length; i++) {    var p = calcFibXY(i, seq[i]);    points.push(p);  }   // move to the first point   context.moveTo(points[0].x, points[0].y);   for (i = 1; i < points.length - 2; i ++) {      var xc = (points[i].x + points[i + 1].x) / 2;      var yc = (points[i].y + points[i + 1].y) / 2;      context.quadraticCurveTo(points[i].x, points[i].y, xc, yc);   } // curve through the last two points //context.quadraticCurveTo(points[i].x, points[i].y, points[i+1].x,points[i+1].y);   context.moveTo(points[0].x, points[0].y);  context.closePath();  context.stroke();}draw();